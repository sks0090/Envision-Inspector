/****************************************************************************
MANUSER.H											      (c) Teledyne DALSA 2013

Description:
	Manager Coreco Public Functions

****************************************************************************/

#ifndef _MANUSER_H_
#define _MANUSER_H_
#include "cordef.h"
#include "capiman.h"
#include "corhw_prm_user.h"
#include "cpackd.h"
#define CORCMD_USER_LOAD_FIRMWARE                     (CORMAN_CORECO_CMD + 93)
#define CORCMD_USER_DEVICE_PARAMETER_READ             (CORMAN_CORECO_CMD + 97)
#define CORCMD_USER_DEVICE_PARAMETER_WRITE            (CORMAN_CORECO_CMD + 98)
#define CORCMD_USER_DEVICE_PARAMETER_READ_EX          (CORMAN_CORECO_CMD + 122)
#define CORCMD_USER_LOAD_FIRMWARE_WITH_CALLBACK       (CORMAN_CORECO_CMD + 118)

typedef struct COR_PACK
{
   UINT32 deviceIndex;  // device to access
	UINT32 prmIndex;     // one of CORHW_DEVICE_PRM_xxx
	UINT32 prmSize;      // size in bytes of the variable size input data following
} CORCMD_DEVICE_PARAMETER, *PCORCMD_DEVICE_PARAMETER;

typedef struct COR_PACK
{
   CORCMD_DEVICE_PARAMETER prm;
   CORHW_DEVICE_PARAMETER_SET_DIAGNOSTIC_MODE_DATA data;
} CORCMD_DEVICE_PARAMETER_SET_DIAGNOSTIC_MODE, *PCORCMD_DEVICE_PARAMETER_SET_DIAGNOSTIC_MODE;

typedef struct COR_PACK
{
   CORCMD_DEVICE_PARAMETER prm;
   CORHW_DEVICE_PARAMETER_MEMORY_TEST_DATA data;
} CORCMD_DEVICE_PARAMETER_MEMORY_TEST, *PCORCMD_DEVICE_PARAMETER_MEMORY_TEST;

typedef struct COR_PACK
{
   CORCMD_DEVICE_PARAMETER prm;
   CORHW_DEVICE_PARAMETER_GET_MEMORY_TEST_RESULT_DATA data;
} CORCMD_DEVICE_PARAMETER_GET_MEMORY_TEST_RESULT,*PCORCMD_DEVICE_PARAMETER_GET_MEMORY_TEST_RESULT;

typedef struct COR_PACK
{
   CORCMD_DEVICE_PARAMETER prm;
   CORHW_DEVICE_PARAMETER_GET_VOLTAGE_DATA data;
} CORCMD_DEVICE_PARAMETER_GET_VOLTAGE,*PCORCMD_DEVICE_PARAMETER_GET_VOLTAGE;

typedef struct COR_PACK
{
   CORCMD_DEVICE_PARAMETER prm;
   CORHW_DEVICE_PARAMETER_GET_TEMPERATURE_DATA data;
} CORCMD_DEVICE_PARAMETER_GET_TEMPERATURE,*PCORCMD_DEVICE_PARAMETER_GET_TEMPERATURE;

typedef struct COR_PACK
{
	UINT32 firmwareIndex;
	char   fileName[MAX_PATH];
} CORCMD_LOAD_FIRMWARE_PRM, CORCMD_USER_LOAD_FIRMWARE_PRM, *PCORCMD_LOAD_FIRMWARE_PRM, *PCORCMD_USER_LOAD_FIRMWARE_PRM;

typedef struct COR_PACK
{
      CORCMD_DEVICE_PARAMETER prm;
      char   fileName[512];
      void *context;
      PCOREVENTINFOCALLBACK   callback;
      UINT32 serverIndex;
      UINT32 deviceFileIndex;
      _CORSERVER serverHandle;
} CORCMD_LOAD_FIRMWARE_WITH_CALLBACK_PRM, *PCORCMD_LOAD_FIRMWARE_WITH_CALLBACK_PRM;

typedef struct COR_PACK
{
   CORCMD_DEVICE_PARAMETER prm;
   CORHW_DEVICE_PARAMETER_GET_LANES_STATS data;
} CORCMD_DEVICE_PARAMETER_GET_LANES_STATS, *PCORCMD_DEVICE_PARAMETER_GET_LANES_STATS;

typedef struct COR_PACK
{
   CORCMD_DEVICE_PARAMETER prm;
   CORHW_DEVICE_PARAMETER_GET_EYE_DIAGRAM_DATA_IN dataIn;
} CORCMD_DEVICE_PARAMETER_GET_EYE_DIAGRAM_IN, *PCORCMD_DEVICE_PARAMETER_GET_EYE_DIAGRAM_IN;

typedef struct COR_PACK
{
   CORHW_DEVICE_PARAMETER_GET_EYE_DIAGRAM_DATA_OUT dataOut;
} CORCMD_DEVICE_PARAMETER_GET_EYE_DIAGRAM_OUT, *PCORCMD_DEVICE_PARAMETER_GET_EYE_DIAGRAM_OUT;

typedef struct COR_PACK
{
   CORCMD_DEVICE_PARAMETER prm;
   CORHW_DEVICE_PARAMETER_GET_USER_DATA_IN data;
}  CORCMD_DEVICE_PARAMETER_GET_USER_DATA_IN, *PCORCMD_DEVICE_PARAMETER_GET_USER_DATA_IN;

typedef struct COR_PACK
{
   CORHW_DEVICE_PARAMETER_GET_USER_DATA_OUT data;
}  CORCMD_DEVICE_PARAMETER_GET_USER_DATA_OUT, *PCORCMD_DEVICE_PARAMETER_GET_USER_DATA_OUT;

typedef struct COR_PACK
{
   CORCMD_DEVICE_PARAMETER prm;
   CORHW_DEVICE_PARAMETER_SET_USER_DATA data;
}  CORCMD_DEVICE_PARAMETER_SET_USER_DATA, *PCORCMD_DEVICE_PARAMETER_SET_USER_DATA;

typedef struct COR_PACK
{
   CORCMD_DEVICE_PARAMETER prm;
   CORHW_DEVICE_PARAMETER_GET_SFP_DATA_IN data;
}  CORCMD_DEVICE_PARAMETER_GET_SFP_DATA_IN, *PCORCMD_DEVICE_PARAMETER_GET_SFP_DATA_IN;

typedef struct COR_PACK
{
   CORHW_DEVICE_PARAMETER_GET_SFP_DATA_OUT data;
}  CORCMD_DEVICE_PARAMETER_GET_SFP_DATA_OUT, *PCORCMD_DEVICE_PARAMETER_GET_SFP_DATA_OUT;

typedef struct COR_PACK
{
   CORCMD_DEVICE_PARAMETER prm;
   CORHW_DEVICE_PARAMETER_GET_USER_DEVICE_INFO_VALUE_IN data;
} CORCMD_DEVICE_PARAMETER_GET_USER_DEVICE_INFO_VALUE_IN, *PCORCMD_DEVICE_PARAMETER_GET_USER_DEVICE_INFO_VALUE_IN;

typedef struct COR_PACK
{
   CORHW_DEVICE_PARAMETER_GET_USER_DEVICE_INFO_VALUE_OUT data;
} CORCMD_DEVICE_PARAMETER_GET_USER_DEVICE_INFO_VALUE_OUT, *PCORCMD_DEVICE_PARAMETER_GET_USER_DEVICE_INFO_VALUE_OUT;

typedef struct COR_PACK
{
   CORCMD_DEVICE_PARAMETER prm;
   CORHW_DEVICE_PARAMETER_SET_SERIAL_PORT_COM_INDEX data;
} CORCMD_DEVICE_PARAMETER_SET_SERIAL_PORT_COM_INDEX, *PCORCMD_DEVICE_PARAMETER_SET_SERIAL_PORT_COM_INDEX;

typedef struct COR_PACK
{
   CORCMD_DEVICE_PARAMETER prm;
   CORHW_DEVICE_PARAMETER_SET_CAMERA_PORT_WRITE data;
} CORCMD_DEVICE_PARAMETER_CAMERA_PORT_WRITE, *PCORCMD_DEVICE_PARAMETER_CAMERA_PORT_WRITE;

typedef struct COR_PACK
{
   CORCMD_DEVICE_PARAMETER prm;
   CORHW_DEVICE_PARAMETER_GET_CAMERA_PORT_READ data;
} CORCMD_DEVICE_PARAMETER_CAMERA_PORT_READ, *PCORCMD_DEVICE_PARAMETER_CAMERA_PORT_READ;


#include "cunpackd.h"
#endif